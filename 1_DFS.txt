# Using a Python dictionary to act as an adjacency list
graph = {
  'A' : ['C','D','B'],
  'C' : ['E'],
  'D' : ['F'],
  'B' : [],
  'E' : [],
  'F' : []
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):  #function for dfs 
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, 'A')


graph = {
  'A': ['C', 'D', 'B'],
  'C': ['E'],
  'D': ['F'],
  'B': [],
  'E': [],
  'F': []
}

visited = []  # List for visited nodes.


def bfs_recursive(graph, queue):
    if not queue:
        return

    m = queue.pop(0)
    print(m)

    for neighbour in graph[m]:
        if neighbour not in visited:
            visited.append(neighbour)
            queue.append(neighbour)

    bfs_recursive(graph, queue)


def bfs(visited, graph, node):
    visited.append(node)
    queue = [node]  # Start with the initial node

    bfs_recursive(graph, queue)


# Driver Code
print("Following is the Breadth-First Search (Recursive):")
bfs(visited, graph, 'A')


//time complxity O(V+E) vertice and edges
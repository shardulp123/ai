import heapq
import numpy as np

def aStarAlgo(start_state, goal_state):
    open_set = []
    closed_set = set()
    g = {}  # store distance from starting state
    parents = {}  # parents contain an adjacency map of all nodes

    # distance of starting state from itself is zero
    g[start_state] = 0
    # start_state is the root node, so it has no parent
    parents[start_state] = None

    # Priority queue for open set, using heapq for efficient retrieval of the node with the lowest f-score
    heapq.heappush(open_set, (0, start_state))

    while open_set:
        _, current_state = heapq.heappop(open_set)

        if current_state == goal_state:
            # Path reconstruction
            path = []
            while current_state is not None:
                path.append(current_state)
                current_state = parents[current_state]
            path.reverse()
            return path

        closed_set.add(current_state)

        # Generate neighboring states
        neighbors = get_neighbors(current_state)

        for neighbor_state in neighbors:
            neighbor_cost = g[current_state] + 1  # Cost between neighboring states is assumed to be 1

            if neighbor_state not in g or neighbor_cost < g[neighbor_state]:
                # Update cost and parent
                g[neighbor_state] = neighbor_cost
                parents[neighbor_state] = current_state

                # Calculate heuristic cost (modify the heuristic function based on your game problem)
                h_cost = heuristic(neighbor_state, goal_state)

                # Calculate the f-score (g + h)
                f_score = neighbor_cost + h_cost

                if neighbor_state not in closed_set:
                    # Add to open set if not already visited
                    heapq.heappush(open_set, (f_score, neighbor_state))

    # No path found
    return None


def get_neighbors(state):
    # Implement this function to generate neighboring states based on the available moves in your puzzle game
    neighbors = []
    puzzle = np.array(state).reshape(3, 3)

    # Find the position of the empty space (0)
    empty_pos = np.argwhere(puzzle == 0)[0]
    x, y = empty_pos

    # Possible moves: up, down, left, right
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    for dx, dy in moves:
        new_x, new_y = x + dx, y + dy

        if 0 <= new_x < 3 and 0 <= new_y < 3:
            # Make a copy of the puzzle and perform the move
            new_puzzle = puzzle.copy()
            new_puzzle[x, y], new_puzzle[new_x, new_y] = new_puzzle[new_x, new_y], new_puzzle[x, y]

            # Append the new state to the neighbors list
            neighbors.append(tuple(new_puzzle.flatten()))

    return neighbors


def heuristic(state, goal_state):
    # Implement your heuristic function based on your puzzle-specific requirements
    # For example, you can use the Manhattan distance for the 8-puzzle game
    state = np.array(state).reshape(3, 3)
    goal_state = np.array(goal_state).reshape(3, 3)

    # Calculate the Manhattan distance between the current state and the goal state
    distance = np.sum(np.abs(np.argwhere(state != 0) - np.argwhere(goal_state != 0)))

    return distance


# Example usage
start_state = (1, 2, 3, 4, 5, 0,6,7, 8)
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)

path = aStarAlgo(start_state, goal_state)

if path:
    print("Path found:")
    for state in path:
        print(np.array(state).reshape(3, 3))
else:
    print("No path found.")
